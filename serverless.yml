# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

org: techtransformations
app: tooltime-backend
service: tooltime-backend
custom:
  secrets: ${file(secrets.${self:custom.stage}.json)}
  stage: 'local'
  amplify:
    - filename: ../tooltime-warehouse/src/aws-exports.js
      type: javascript
      appClient: CognitoUserPoolClient

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '1'

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 30
  stage: ${self:custom.secrets.NODE_ENV}
  region: us-east-1
  environment: 
    NODE_ENV: ${self:custom.secrets.NODE_ENV}
    DB_NAME: ${self:custom.secrets.DB_NAME}
    DB_USER: ${self:custom.secrets.DB_USER}
    DB_PASSWORD: ${self:custom.secrets.DB_PASSWORD}
    DB_HOST: ${self:custom.secrets.DB_HOST}
    DB_PORT: ${self:custom.secrets.DB_PORT}
  vpc:
    securityGroupIds:
      - ${self:custom.secrets.SECURITY_GROUP_ID}
    subnetIds:
      - ${self:custom.secrets.SUBNET1_ID}
      - ${self:custom.secrets.SUBNET2_ID}
      - ${self:custom.secrets.SUBNET3_ID}
      - ${self:custom.secrets.SUBNET4_ID}
      - ${self:custom.secrets.SUBNET5_ID}
      - ${self:custom.secrets.SUBNET6_ID}
  httpApi:
    cors: true

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - node_modules/**

functions:
  tooltime-backend:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY /{proxy+}'

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins: 
 - serverless-offline
 - aws-amplify-serverless-plugin

resources:
  - ${file(aws_resources/cognito-user-pool.yml)}
  - ${file(aws_resources/cognito-identity-pool.yml)}
#  - ${file(aws_resources/api-gateway-errors.yml)}
  - Resources:
      AWSLambdaVPCAccessExecutionRole:
        Type: AWS::IAM::ManagedPolicy
        Properties:
          Description: Creating policy for vpc connetion.
          Roles:
            - {"Ref" : "IamRoleLambdaExecution"}
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: "*"


# service: aurora

# provider:
#   name: aws
#   runtime: nodejs8.10
#   region: us-west-2
#   stage: development
#   environment:
#     AURORA_HOST: ${self:custom.AURORA.HOST}
#     AURORA_PORT: ${self:custom.AURORA.PORT}
#     AURORA_DB_NAME: ${self:custom.AURORA.DB_NAME}
#     AURORA_USERNAME: ${self:custom.AURORA.USERNAME}
#     AURORA_PASSWORD: ${self:custom.AURORA.PASSWORD}

# # Define variables here for lisibility
# custom:
#   AURORA:
#     DB_NAME: aurora${opt:stage, self:provider.stage}
#     USERNAME: master
#     PASSWORD: password
#     HOST:
#       Fn::GetAtt: [AuroraRDSCluster, Endpoint.Address]
#     PORT:
#       Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]
#     VPC_CIDR: 10
#   SQS:
#     NAME: aurora-queue-${opt:stage, self:provider.stage}

# functions:
#   async_query:
#     handler: src/handler.sqs
#     vpc:
#       securityGroupIds:
#         - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
#       subnetIds:
#         - Ref: ServerlessSubnetA
#         - Ref: ServerlessSubnetB
#         - Ref: ServerlessSubnetC
#     events:
#       - sqs:
#           arn:
#             Fn::GetAtt: [AuroraSQSQueue, Arn]
#           batchSize: 1
#   sync_query:
#     handler: src/handler.query
#     vpc:
#       securityGroupIds:
#         - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
#       subnetIds:
#         - Ref: ServerlessSubnetA
#         - Ref: ServerlessSubnetB
#         - Ref: ServerlessSubnetC
#     events:
#       - http:
#           path: /query
#           method: post
# resources:
#   Resources:
#     AsyncQueryQueue:
#       Type: AWS::SQS::Queue
#       Properties:
#         QueueName: ${self:custom.SQS.NAME}
#     # VPC config
#     ServerlessVPC:
#       Type: AWS::EC2::VPC
#       Properties:
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.0.0/16
#         EnableDnsSupport: true
#         EnableDnsHostnames: true
#         InstanceTenancy: default
#     ServerlessSubnetA:
#       DependsOn: ServerlessVPC
#       Type: AWS::EC2::Subnet
#       Properties:
#         VpcId:
#           Ref: ServerlessVPC
#         AvailabilityZone: ${self:provider.region}a
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.0.0/24
#     ServerlessSubnetB:
#       DependsOn: ServerlessVPC
#       Type: AWS::EC2::Subnet
#       Properties:
#         VpcId:
#           Ref: ServerlessVPC
#         AvailabilityZone: ${self:provider.region}b
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.1.0/24
#     ServerlessSubnetC:
#       DependsOn: ServerlessVPC
#       Type: AWS::EC2::Subnet
#       Properties:
#         VpcId:
#           Ref: ServerlessVPC
#         AvailabilityZone: ${self:provider.region}c
#         CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.2.0/24
#     # Aurora DB config
#     AuroraSubnetGroup:
#       Type: AWS::RDS::DBSubnetGroup
#       Properties:
#         DBSubnetGroupDescription: "Aurora Subnet Group"
#         SubnetIds:
#           - Ref: ServerlessSubnetA
#           - Ref: ServerlessSubnetB
#           - Ref: ServerlessSubnetC
#     AuroraRDSClusterParameter:
#       Type: AWS::RDS::DBClusterParameterGroup
#       Properties:
#         Description: Parameter group for the Serverless Aurora RDS DB.
#         Family: aurora-mysql5.7
#         Parameters:
#           character_set_database: "utf32"
#     AuroraRDSInstanceParameter:
#       Type: AWS::RDS::DBParameterGroup
#       Properties:
#         Description: Parameter group for the Serverless Aurora RDS DB.
#         Family: aurora-mysql5.7
#         Parameters:
#           sql_mode: IGNORE_SPACE
#           max_connections: 100
#           wait_timeout: 900
#           interactive_timeout: 900
#     AuroraRDSCluster:
#       Type: "AWS::RDS::DBCluster"
#       Properties:
#         MasterUsername: ${self:custom.AURORA.USERNAME}
#         MasterUserPassword: ${self:custom.AURORA.PASSWORD}
#         DBSubnetGroupName:
#           Ref: AuroraSubnetGroup
#         Engine: aurora-mysql
#         EngineVersion: "5.7"
#         DatabaseName: ${self:custom.AURORA.DB_NAME}
#         BackupRetentionPeriod: 3
#         DBClusterParameterGroupName:
#           Ref: AuroraRDSClusterParameter
#         VpcSecurityGroupIds:
#           - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
#     AuroraRDSInstance:
#       Type: "AWS::RDS::DBInstance"
#       Properties:
#         DBInstanceClass: db.t2.medium
#         DBSubnetGroupName:
#           Ref: AuroraSubnetGroup
#         Engine: aurora-mysql
#         EngineVersion: "5.7"
#         PubliclyAccessible: false
#         DBParameterGroupName:
#           Ref: AuroraRDSInstanceParameter
#         DBClusterIdentifier:
#           Ref: AuroraRDSCluster